{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python project template for data science project \u00b6 This is a repository will list of reusable components for building a python library and using it in data science workflow. Purpose of the project \u00b6 quick start common structure between project packing and distribution of code quick on-boarding","title":"Home"},{"location":"#python-project-template-for-data-science-project","text":"This is a repository will list of reusable components for building a python library and using it in data science workflow.","title":"Python project template for data science project"},{"location":"#purpose-of-the-project","text":"quick start common structure between project packing and distribution of code quick on-boarding","title":"Purpose of the project"},{"location":"TODO/","text":"Make sure that the site is getting generated. Generated output files should not be push to git remote. The HTML file from the content of this directory will be generated in CI pipeline. Post that it has to be push to a static website. Pin the name of the static website in readme section of the repository. Q. Where this mkdocs outputs are getting stored? --> site folder in root directory will have all the generated HTML files. This has to be uploaded in a blob storage --> azure static web app.","title":"TODO"},{"location":"data/","text":"Code Example \u00b6 PHP \u00b6 class App { /** * @var string */ private $name; public __construct($name) { $this->name = $name; } } C \u00b6 public class App { private string Name {get; set;} public App(string name) { this.Name = name; } } Json \u00b6 {\"result\":\"success\"} Bash \u00b6 curl -H 'Content-type: application/json' http://localhost:8080/api/","title":"Data"},{"location":"data/#code-example","text":"","title":"Code Example"},{"location":"data/#php","text":"class App { /** * @var string */ private $name; public __construct($name) { $this->name = $name; } }","title":"PHP"},{"location":"data/#c","text":"public class App { private string Name {get; set;} public App(string name) { this.Name = name; } }","title":"C"},{"location":"data/#json","text":"{\"result\":\"success\"}","title":"Json"},{"location":"data/#bash","text":"curl -H 'Content-type: application/json' http://localhost:8080/api/","title":"Bash"},{"location":"dir_str/","text":"Directory structure of the python project \u00b6 \u251c\u2500\u2500\u2500data \u2502 \u251c\u2500\u2500\u2500persistent \u2502 \u2514\u2500\u2500\u2500temporary \u251c\u2500\u2500\u2500dockerfiles \u2502 \u251c\u2500\u2500\u2500base \u2502 \u251c\u2500\u2500\u2500build \u2502 \u251c\u2500\u2500\u2500development \u2502 \u251c\u2500\u2500\u2500development_jupyter \u2502 \u251c\u2500\u2500\u2500fastapi \u2502 \u251c\u2500\u2500\u2500flask \u2502 \u251c\u2500\u2500\u2500runner \u2502 \u2514\u2500\u2500\u2500streamlit \u251c\u2500\u2500\u2500docs \u2502 \u251c\u2500\u2500\u2500build \u2502 \u2502 \u251c\u2500\u2500\u2500doctrees \u2502 \u2502 \u2514\u2500\u2500\u2500html \u2502 \u2502 \u251c\u2500\u2500\u2500_sources \u2502 \u2502 \u2514\u2500\u2500\u2500_static \u2502 \u2502 \u251c\u2500\u2500\u2500css \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500fonts \u2502 \u2502 \u2514\u2500\u2500\u2500js \u2502 \u2514\u2500\u2500\u2500source \u2502 \u251c\u2500\u2500\u2500_static \u2502 \u2514\u2500\u2500\u2500_templates \u251c\u2500\u2500\u2500lib_template \u2502 \u251c\u2500\u2500\u2500sub_module_1 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u251c\u2500\u2500\u2500sub_module_2 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u2514\u2500\u2500\u2500tests \u251c\u2500\u2500\u2500logs \u251c\u2500\u2500\u2500notebooks \u251c\u2500\u2500\u2500others \u2502 \u251c\u2500\u2500\u2500cd \u2502 \u2514\u2500\u2500\u2500ci \u251c\u2500\u2500\u2500tests \u2514\u2500\u2500\u2500wiki_source \u251c\u2500\u2500\u2500css \u2514\u2500\u2500\u2500js data: data folder will have all the datasets. any datasets which we want to push to blob or download from blob has to be placed in temporary folder. persistent folder is the folder which will have the files and hash value based mapping. this folder will be synced with a blob in a periodic basis. dockerfiles: this directory will have multiple reusable *.Dockerfile , all the supporting files required to build these docker images will be in respect folder inside the dockerfiles directory. docs: this folder will have all the library function related documentation in this. after running Sphinx all the API level documentation will be stored in docs/build/html folder. this folder has to be stored in a azure static website or should be publish in gh-pages along with the project level documentation. lib_template: this is the source directory. All the python code to be packaged has to be placed here. logs : all the log files generated during development will be stored here. This can be synced with blob (need to think about this approach and better use-case.) notebooks: this is the place where all the development notebook will live. others: other reusable resources such as deployment file, blog post, reference etc will be here. Also, some of the reusable components in CI/CD pipeline can be stored here as configs files. test: all the library level tests, regression tests, integration tests and property based tests will be stored here. Here tests must be using the installed library from existing python interpreter. wiki_source: all the project level documentation will live in this folder. This content will generated a HTML site using mkdocs . After doc generation it will produce a folder called site in the root directory which has to be published to a azure static website/netlify or github page for project level documentation and user guide.","title":"Directory structure"},{"location":"dir_str/#directory-structure-of-the-python-project","text":"\u251c\u2500\u2500\u2500data \u2502 \u251c\u2500\u2500\u2500persistent \u2502 \u2514\u2500\u2500\u2500temporary \u251c\u2500\u2500\u2500dockerfiles \u2502 \u251c\u2500\u2500\u2500base \u2502 \u251c\u2500\u2500\u2500build \u2502 \u251c\u2500\u2500\u2500development \u2502 \u251c\u2500\u2500\u2500development_jupyter \u2502 \u251c\u2500\u2500\u2500fastapi \u2502 \u251c\u2500\u2500\u2500flask \u2502 \u251c\u2500\u2500\u2500runner \u2502 \u2514\u2500\u2500\u2500streamlit \u251c\u2500\u2500\u2500docs \u2502 \u251c\u2500\u2500\u2500build \u2502 \u2502 \u251c\u2500\u2500\u2500doctrees \u2502 \u2502 \u2514\u2500\u2500\u2500html \u2502 \u2502 \u251c\u2500\u2500\u2500_sources \u2502 \u2502 \u2514\u2500\u2500\u2500_static \u2502 \u2502 \u251c\u2500\u2500\u2500css \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500fonts \u2502 \u2502 \u2514\u2500\u2500\u2500js \u2502 \u2514\u2500\u2500\u2500source \u2502 \u251c\u2500\u2500\u2500_static \u2502 \u2514\u2500\u2500\u2500_templates \u251c\u2500\u2500\u2500lib_template \u2502 \u251c\u2500\u2500\u2500sub_module_1 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u251c\u2500\u2500\u2500sub_module_2 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u2514\u2500\u2500\u2500tests \u251c\u2500\u2500\u2500logs \u251c\u2500\u2500\u2500notebooks \u251c\u2500\u2500\u2500others \u2502 \u251c\u2500\u2500\u2500cd \u2502 \u2514\u2500\u2500\u2500ci \u251c\u2500\u2500\u2500tests \u2514\u2500\u2500\u2500wiki_source \u251c\u2500\u2500\u2500css \u2514\u2500\u2500\u2500js data: data folder will have all the datasets. any datasets which we want to push to blob or download from blob has to be placed in temporary folder. persistent folder is the folder which will have the files and hash value based mapping. this folder will be synced with a blob in a periodic basis. dockerfiles: this directory will have multiple reusable *.Dockerfile , all the supporting files required to build these docker images will be in respect folder inside the dockerfiles directory. docs: this folder will have all the library function related documentation in this. after running Sphinx all the API level documentation will be stored in docs/build/html folder. this folder has to be stored in a azure static website or should be publish in gh-pages along with the project level documentation. lib_template: this is the source directory. All the python code to be packaged has to be placed here. logs : all the log files generated during development will be stored here. This can be synced with blob (need to think about this approach and better use-case.) notebooks: this is the place where all the development notebook will live. others: other reusable resources such as deployment file, blog post, reference etc will be here. Also, some of the reusable components in CI/CD pipeline can be stored here as configs files. test: all the library level tests, regression tests, integration tests and property based tests will be stored here. Here tests must be using the installed library from existing python interpreter. wiki_source: all the project level documentation will live in this folder. This content will generated a HTML site using mkdocs . After doc generation it will produce a folder called site in the root directory which has to be published to a azure static website/netlify or github page for project level documentation and user guide.","title":"Directory structure of the python project"}]}
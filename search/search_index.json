{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python project template for data science project \u00b6 This is a repository will list of reusable components for building a python library and using it in data science workflow. Purpose of the project \u00b6 quick start common structure between project packing and distribution of code quick on-boarding","title":"Home"},{"location":"#python-project-template-for-data-science-project","text":"This is a repository will list of reusable components for building a python library and using it in data science workflow.","title":"Python project template for data science project"},{"location":"#purpose-of-the-project","text":"quick start common structure between project packing and distribution of code quick on-boarding","title":"Purpose of the project"},{"location":"TODO/","text":"Make sure that the site is getting generated. Generated output files should not be push to git remote. The HTML file from the content of this directory will be generated in CI pipeline. Post that it has to be push to a static website. Pin the name of the static website in readme section of the repository. Q. Where this mkdocs outputs are getting stored? --> site folder in root directory will have all the generated HTML files. This has to be uploaded in a blob storage --> azure static web app.","title":"TODO"},{"location":"data/","text":"data directory \u00b6 Four simple operations, initialize data folder in blob download data upload data clean data folder Note: There will not be any version control required in this.","title":"Data"},{"location":"data/#data-directory","text":"Four simple operations, initialize data folder in blob download data upload data clean data folder Note: There will not be any version control required in this.","title":"data directory"},{"location":"dir_str/","text":"Directory structure of the python project \u00b6 Directory tree \u00b6 \u251c\u2500\u2500\u2500data \u2502 \u251c\u2500\u2500\u2500persistent \u2502 \u2514\u2500\u2500\u2500temporary \u251c\u2500\u2500\u2500dockerfiles \u2502 \u251c\u2500\u2500\u2500base \u2502 \u251c\u2500\u2500\u2500build \u2502 \u251c\u2500\u2500\u2500development \u2502 \u251c\u2500\u2500\u2500development_jupyter \u2502 \u251c\u2500\u2500\u2500fastapi \u2502 \u251c\u2500\u2500\u2500flask \u2502 \u251c\u2500\u2500\u2500runner \u2502 \u2514\u2500\u2500\u2500streamlit \u251c\u2500\u2500\u2500docs \u2502 \u251c\u2500\u2500\u2500build \u2502 \u2502 \u251c\u2500\u2500\u2500doctrees \u2502 \u2502 \u2514\u2500\u2500\u2500html \u2502 \u2502 \u251c\u2500\u2500\u2500_sources \u2502 \u2502 \u2514\u2500\u2500\u2500_static \u2502 \u2502 \u251c\u2500\u2500\u2500css \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500fonts \u2502 \u2502 \u2514\u2500\u2500\u2500js \u2502 \u2514\u2500\u2500\u2500source \u2502 \u251c\u2500\u2500\u2500_static \u2502 \u2514\u2500\u2500\u2500_templates \u251c\u2500\u2500\u2500lib_template \u2502 \u251c\u2500\u2500\u2500sub_module_1 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u251c\u2500\u2500\u2500sub_module_2 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u2514\u2500\u2500\u2500tests \u251c\u2500\u2500\u2500logs \u251c\u2500\u2500\u2500notebooks \u251c\u2500\u2500\u2500others \u2502 \u251c\u2500\u2500\u2500cd \u2502 \u2514\u2500\u2500\u2500ci \u251c\u2500\u2500\u2500tests \u2514\u2500\u2500\u2500wiki_source \u251c\u2500\u2500\u2500css \u2514\u2500\u2500\u2500js Directory description \u00b6 data: data folder will have all the datasets. any datasets which we want to push to blob or download from blob has to be placed in temporary folder. persistent folder is the folder which will have the files and hash value based mapping. this folder will be synced with a blob in a periodic basis. dockerfiles: this directory will have multiple reusable *.Dockerfile , all the supporting files required to build these docker images will be in respect folder inside the dockerfiles directory. docs: this folder will have all the library function related documentation in this. after running Sphinx all the API level documentation will be stored in docs/build/html folder. this folder has to be stored in a azure static website or should be publish in gh-pages along with the project level documentation. lib_template: this is the source directory. All the python code to be packaged has to be placed here. logs : all the log files generated during development will be stored here. This can be synced with blob (need to think about this approach and better use-case.) notebooks: this is the place where all the development notebook will live. others: other reusable resources such as deployment file, blog post, reference etc will be here. Also, some of the reusable components in CI/CD pipeline can be stored here as configs files. test: all the library level tests, regression tests, integration tests and property based tests will be stored here. Here tests must be using the installed library from existing python interpreter. wiki_source: all the project level documentation will live in this folder. This content will generated a HTML site using mkdocs . After doc generation it will produce a folder called site in the root directory which has to be published to a azure static website/netlify or github page for project level documentation and user guide.","title":"Directory structure"},{"location":"dir_str/#directory-structure-of-the-python-project","text":"","title":"Directory structure of the python project"},{"location":"dir_str/#directory-tree","text":"\u251c\u2500\u2500\u2500data \u2502 \u251c\u2500\u2500\u2500persistent \u2502 \u2514\u2500\u2500\u2500temporary \u251c\u2500\u2500\u2500dockerfiles \u2502 \u251c\u2500\u2500\u2500base \u2502 \u251c\u2500\u2500\u2500build \u2502 \u251c\u2500\u2500\u2500development \u2502 \u251c\u2500\u2500\u2500development_jupyter \u2502 \u251c\u2500\u2500\u2500fastapi \u2502 \u251c\u2500\u2500\u2500flask \u2502 \u251c\u2500\u2500\u2500runner \u2502 \u2514\u2500\u2500\u2500streamlit \u251c\u2500\u2500\u2500docs \u2502 \u251c\u2500\u2500\u2500build \u2502 \u2502 \u251c\u2500\u2500\u2500doctrees \u2502 \u2502 \u2514\u2500\u2500\u2500html \u2502 \u2502 \u251c\u2500\u2500\u2500_sources \u2502 \u2502 \u2514\u2500\u2500\u2500_static \u2502 \u2502 \u251c\u2500\u2500\u2500css \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500fonts \u2502 \u2502 \u2514\u2500\u2500\u2500js \u2502 \u2514\u2500\u2500\u2500source \u2502 \u251c\u2500\u2500\u2500_static \u2502 \u2514\u2500\u2500\u2500_templates \u251c\u2500\u2500\u2500lib_template \u2502 \u251c\u2500\u2500\u2500sub_module_1 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u251c\u2500\u2500\u2500sub_module_2 \u2502 \u2502 \u2514\u2500\u2500\u2500tests \u2502 \u2514\u2500\u2500\u2500tests \u251c\u2500\u2500\u2500logs \u251c\u2500\u2500\u2500notebooks \u251c\u2500\u2500\u2500others \u2502 \u251c\u2500\u2500\u2500cd \u2502 \u2514\u2500\u2500\u2500ci \u251c\u2500\u2500\u2500tests \u2514\u2500\u2500\u2500wiki_source \u251c\u2500\u2500\u2500css \u2514\u2500\u2500\u2500js","title":"Directory tree"},{"location":"dir_str/#directory-description","text":"data: data folder will have all the datasets. any datasets which we want to push to blob or download from blob has to be placed in temporary folder. persistent folder is the folder which will have the files and hash value based mapping. this folder will be synced with a blob in a periodic basis. dockerfiles: this directory will have multiple reusable *.Dockerfile , all the supporting files required to build these docker images will be in respect folder inside the dockerfiles directory. docs: this folder will have all the library function related documentation in this. after running Sphinx all the API level documentation will be stored in docs/build/html folder. this folder has to be stored in a azure static website or should be publish in gh-pages along with the project level documentation. lib_template: this is the source directory. All the python code to be packaged has to be placed here. logs : all the log files generated during development will be stored here. This can be synced with blob (need to think about this approach and better use-case.) notebooks: this is the place where all the development notebook will live. others: other reusable resources such as deployment file, blog post, reference etc will be here. Also, some of the reusable components in CI/CD pipeline can be stored here as configs files. test: all the library level tests, regression tests, integration tests and property based tests will be stored here. Here tests must be using the installed library from existing python interpreter. wiki_source: all the project level documentation will live in this folder. This content will generated a HTML site using mkdocs . After doc generation it will produce a folder called site in the root directory which has to be published to a azure static website/netlify or github page for project level documentation and user guide.","title":"Directory description"},{"location":"source/","text":"Source folder \u00b6 All the python source code has to live here. Source folder or lib_template in this case will be main module which will be converted in to package. There will be multiple sub-modules within this module. These sub-modules has to be by functionality. These are also logical bifurcation of the code. All the submodule should be as independent as possible. If there are common functionalities which has to be share across different sub-modules, then it can be part of module as utils or helper or shared assets. There will be tests folder in each sub-module. inside this tests folder there will be tests which are related to each sub module. in main module also, there will a tests folder. this will be testing the functionality of the module. In root folder, there will be a tests folder. the purpose of this tests folder is to tests the functionality once the library has been developed. Additional notes: There will be an __init__.py in each module and sub-module. All the functions has to be registered in this file. All the internal functions should start with _ prefix. Any function _ prefix should not expose. Logs will be generated by module and stored in the logs file. CLI app will be in main module folder. __version__ from __init__.py is something which will track version of the library. main.py in the main module where all the high level APIs to be exposed by the module is managed.","title":"Source"},{"location":"source/#source-folder","text":"All the python source code has to live here. Source folder or lib_template in this case will be main module which will be converted in to package. There will be multiple sub-modules within this module. These sub-modules has to be by functionality. These are also logical bifurcation of the code. All the submodule should be as independent as possible. If there are common functionalities which has to be share across different sub-modules, then it can be part of module as utils or helper or shared assets. There will be tests folder in each sub-module. inside this tests folder there will be tests which are related to each sub module. in main module also, there will a tests folder. this will be testing the functionality of the module. In root folder, there will be a tests folder. the purpose of this tests folder is to tests the functionality once the library has been developed. Additional notes: There will be an __init__.py in each module and sub-module. All the functions has to be registered in this file. All the internal functions should start with _ prefix. Any function _ prefix should not expose. Logs will be generated by module and stored in the logs file. CLI app will be in main module folder. __version__ from __init__.py is something which will track version of the library. main.py in the main module where all the high level APIs to be exposed by the module is managed.","title":"Source folder"}]}